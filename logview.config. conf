 // a3a8d54fafe770e1def69466e8915327
// A port to bind Web UI
log-viewer.server.port=8080
log-viewer.server.context-path="/"
// log-viewer.server.interface=localhost
log-viewer.use-web-socket=true
// If the value is `true`, the web server will be started, if `false`, it will be started only as an agent.
log-viewer.server.enabled=true
log-viewer.backdoor_server.port=9595
// List of custom log levels for all paths.
// log-viewer.log-levels=["TEST"]
// If `true`, log-viewer will unpack gzip/zip archives to the temporary directory before opening. If `false`, gzip/zip cannot be displayed.
log-viewer.unpack-gz-archives=false
// List of file patterns describing visible files and subdirectories
logs = [
  {
    path: "home/igorka/log/*.log"  // All files with ".log" extension are visible by default
  }
  {
    path: "**/*.log.*"  // All files like "*.log.1" are visible by default
  }

//  {
//    path: ${HOME}"/my-app/logs/*.log"
//    format: {
//      type: LogbackLogFormat
//      locale: en_US // Set  custom locale (optional)
//      customLevels: ["XXX", "YYY"] // Set custom level for path (optional)
//      pattern: "%date{yyyy-MM-dd_HH:mm:ss.SSS} [%thread] %-5level %logger{35} - %X{pipelineId}%X{contentId}%msg%n"
//    }
//  }
]

// Enabling/disabling Basic HTTP authentication
authentication.enabled = true
users = [
  { 
      name: "igorka", 
      password: "As1234567" 
  },
  { 
      name: "user2", 
      password-md5: "c81e728d9d4c2f636f067f89cc14862c" // The password is "2". Specified as md5 hash of "2" string.
  } 
]

// Enabling/disabling LDAP authentication
authentication.ldap.enabled = false

// List of users for basic authentication. Used when `authentication.enabled=true and authentication.ldap.enabled=false`
users = [
  { name: "user1", password: "1" },
  { name: "user2", password-md5: "c81e728d9d4c2f636f067f89cc14862c" }, // The password is "2". Specified as md5 hash of "2" string.
  { name: "igorka", password-md5: "a17d9dfdd97e1b7bce5b9f7744e2fad2" }, // As1234567
]

// Ldap config. Used when `authentication.enabled=true and authentication.ldap.enabled=true`
ldap-config = {
  roles: ["user"] // user access groups
  debug: "false"
  useLdaps: "false"
  hostname: "ldap.example.com"
  port: "389"
  bindDn: "cn=Directory Manager"
  bindPassword: "directory"
  authenticationMethod: "simple"
  forceBindingLogin: "true"
  userBaseDn: "ou=people,dc=alcatel"
  userRdnAttribute: "sAMAccountName"
  userIdAttribute: "sAMAccountName"
  userPasswordAttribute: "unicodePwd"
  userObjectClass: "user"
  roleBaseDn: "ou=groups,dc=example,dc=com"
  roleNameAttribute: "cn"
  roleMemberAttribute: "member"
  roleObjectClass: "group"
}

// shorten log paths
log-paths = {

//  // "my-app" is a query parameter in URL, http://localhost:8111/log?log=my-app  shows logs from ~/my-app/logs/my-app.log
//  my-app = {
//    file = ${HOME}"/my-app/logs/my-app.log"
//  }

//  // "multinode-app" is a query parameter in URL, http://localhost:8111/log?log=multinode-app shows logs from
//  // /opt/multinode-app/logs/app.log files on "node-cn-01", "node-cn-02" and "node-cn-03" hosts.
//  multinode-app = {
//    file = "/opt/multinode-app/logs/app.log"
//    host = ["node-cn-01", "node-cn-02", "node-cn-03"]
//  }
}

// A regexp to match log files with custom extension. Used on the page containing the file list. If the file matches to
// this regexp, it can be open as a log.
// log-viewer.navigation.log-file-pattern=".*\\.lll"

ui-config {
//  properties."java-exception-renderer.home-package" = ["com.mycompany.myapp"]  // the name of java package highlighted in stacktraces

  send-usage-statistics: true // ping "http://myregexp.com/log-viewer-statistic/$version/*.png" URL when LogViewer is opening

// Configure custom log levels. Where the group should be from 0 to 4.
//  field-types.level.args.TEST.color = "#6ff"
//  field-types.level.args.TEST.group = "4"
}
